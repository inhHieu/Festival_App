{"ast":null,"code":"import React from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport EventsDetail from \"./EventsDetail\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nfunction Events() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"Events\",\n      component: EventsScreen,\n      options: {\n        title: \"Events\"\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"EventsDetail\",\n      component: EventsDetail,\n      options: {\n        title: \"Event Details\"\n      }\n    })]\n  });\n}\nfunction EventsScreen(_ref) {\n  var _route$params2, _route$params3;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  React.useEffect(function () {\n    var _route$params;\n    if ((_route$params = route.params) != null && _route$params.post) {}\n  }, [(_route$params2 = route.params) == null ? void 0 : _route$params2.post]);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Text, {\n      style: {\n        margin: 10\n      },\n      children: [\"Post: \", (_route$params3 = route.params) == null ? void 0 : _route$params3.post]\n    }), _jsx(Button, {\n      title: \"Event\",\n      onPress: function onPress() {\n        navigation.navigate(\"EventsDetail\", {\n          eventID: 86,\n          eventName: \"Drone light show\"\n        });\n      }\n    })]\n  });\n}\nexport default Events;","map":{"version":3,"names":["React","Button","StyleSheet","Text","View","NavigationContainer","createNativeStackNavigator","EventsDetail","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","Events","Navigator","children","Screen","name","component","EventsScreen","options","title","_ref","_route$params2","_route$params3","navigation","route","useEffect","_route$params","params","post","style","margin","onPress","navigate","eventID","eventName"],"sources":["D:/Learning/ReactNative/Festival/Pages/Events.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Button, StyleSheet, Text, View } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\n\r\nimport EventsDetail from \"./EventsDetail\"\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction Events() {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen\r\n        name=\"Events\"\r\n        component={EventsScreen}\r\n        options={{ title: \"Events\" }}\r\n      />\r\n      <Stack.Screen\r\n        name=\"EventsDetail\"\r\n        component={EventsDetail}\r\n        options={{ title: \"Event Details\" }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nfunction EventsScreen({ navigation, route }) {\r\n  React.useEffect(() => {\r\n    if (route.params?.post) {\r\n      // Post updated, do something with `route.params.post`\r\n      // For example, send the post to the server\r\n    }\r\n  }, [route.params?.post]);\r\n\r\n  return (\r\n    <>\r\n      <Text style={{ margin: 10 }}>Post: {route.params?.post}</Text>\r\n      <Button\r\n        title=\"Event\"\r\n        onPress={() => {\r\n          navigation.navigate(\"EventsDetail\", {\r\n            eventID: 86,\r\n            eventName: \"Drone light show\",\r\n          });\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default Events;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE1B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAE3E,OAAOC,YAAY;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzC,IAAMC,KAAK,GAAGR,0BAA0B,CAAC,CAAC;AAE1C,SAASS,MAAMA,CAAA,EAAG;EAChB,OACEJ,KAAA,CAACG,KAAK,CAACE,SAAS;IAAAC,QAAA,GACdR,IAAA,CAACK,KAAK,CAACI,MAAM;MACXC,IAAI,EAAC,QAAQ;MACbC,SAAS,EAAEC,YAAa;MACxBC,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAS;IAAE,CAC9B,CAAC,EACFd,IAAA,CAACK,KAAK,CAACI,MAAM;MACXC,IAAI,EAAC,cAAc;MACnBC,SAAS,EAAEb,YAAa;MACxBe,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAgB;IAAE,CACrC,CAAC;EAAA,CACa,CAAC;AAEtB;AAEA,SAASF,YAAYA,CAAAG,IAAA,EAAwB;EAAA,IAAAC,cAAA,EAAAC,cAAA;EAAA,IAArBC,UAAU,GAAAH,IAAA,CAAVG,UAAU;IAAEC,KAAK,GAAAJ,IAAA,CAALI,KAAK;EACvC5B,KAAK,CAAC6B,SAAS,CAAC,YAAM;IAAA,IAAAC,aAAA;IACpB,KAAAA,aAAA,GAAIF,KAAK,CAACG,MAAM,aAAZD,aAAA,CAAcE,IAAI,EAAE,CAGxB;EACF,CAAC,EAAE,EAAAP,cAAA,GAACG,KAAK,CAACG,MAAM,qBAAZN,cAAA,CAAcO,IAAI,CAAC,CAAC;EAExB,OACErB,KAAA,CAAAE,SAAA;IAAAI,QAAA,GACEN,KAAA,CAACR,IAAI;MAAC8B,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAG,CAAE;MAAAjB,QAAA,GAAC,QAAM,GAAAS,cAAA,GAACE,KAAK,CAACG,MAAM,qBAAZL,cAAA,CAAcM,IAAI;IAAA,CAAO,CAAC,EAC9DvB,IAAA,CAACR,MAAM;MACLsB,KAAK,EAAC,OAAO;MACbY,OAAO,EAAE,SAAAA,QAAA,EAAM;QACbR,UAAU,CAACS,QAAQ,CAAC,cAAc,EAAE;UAClCC,OAAO,EAAE,EAAE;UACXC,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IAAE,CACH,CAAC;EAAA,CACF,CAAC;AAEP;AAGA,eAAevB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}