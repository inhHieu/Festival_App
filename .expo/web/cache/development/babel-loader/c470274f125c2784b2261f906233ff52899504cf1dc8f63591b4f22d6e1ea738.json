{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport { StyledComponent as _StyledComponent } from \"nativewind\";\nimport React from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport useGetData from \"../Api/useGetData\";\nimport { API_BASE_URL } from \"../Api/BaseURL\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction EventsDetail(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route,\n    event = _ref.event;\n  var _route$params = route.params,\n    eventID = _route$params.eventID,\n    eventName = _route$params.eventName;\n  var _React$useState = React.useState(\"\"),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    postText = _React$useState2[0],\n    setPostText = _React$useState2[1];\n  var _useGetData = useGetData(API_BASE_URL + \"/events/\" + eventID),\n    _useGetData2 = _slicedToArray(_useGetData, 3),\n    data = _useGetData2[0],\n    loading = _useGetData2[1],\n    error = _useGetData2[2];\n  if (!loading) return _jsxs(_StyledComponent, {\n    className: \"  \",\n    component: ScrollView,\n    children: [_jsx(_StyledComponent, {\n      className: \"w-full h-[250] rounded-b-[20] \",\n      source: {\n        uri: data[0].imageUrl\n      },\n      component: Image\n    }), _jsx(_StyledComponent, {\n      className: \"text-2xl mt-[30] mb-[5] px-[30] \",\n      component: Text,\n      children: eventName\n    }), _jsx(_StyledComponent, {\n      className: \" px-[30] mb-[10] text-justify \",\n      component: Text,\n      children: data[0].dateStart\n    }), _jsx(_StyledComponent, {\n      className: \" px-[30] mb-[30] text-justify \",\n      component: Text,\n      children: data[0].eventDescription\n    }), _jsx(_StyledComponent, {\n      className: \" bg-green-500 w-full h-[300] \",\n      component: View\n    }), _jsx(Button, {\n      title: \"log\",\n      onPress: function onPress() {\n        console.log(eventID);\n      }\n    })]\n  });\n}\nexport default EventsDetail;\n{}\n_NativeWindStyleSheet.create({\n  styles: {\n    \"mb-[10]\": {\n      \"marginBottom\": 10\n    },\n    \"mb-[30]\": {\n      \"marginBottom\": 30\n    },\n    \"mb-[5]\": {\n      \"marginBottom\": 5\n    },\n    \"mt-[30]\": {\n      \"marginTop\": 30\n    },\n    \"h-[250]\": {\n      \"height\": 250\n    },\n    \"h-[300]\": {\n      \"height\": 300\n    },\n    \"w-full\": {\n      \"width\": \"100%\"\n    },\n    \"rounded-b-[20]\": {\n      \"borderBottomRightRadius\": 20,\n      \"borderBottomLeftRadius\": 20\n    },\n    \"bg-green-500\": {\n      \"backgroundColor\": \"#22c55e\"\n    },\n    \"px-[30]\": {\n      \"paddingLeft\": 30,\n      \"paddingRight\": 30\n    },\n    \"text-justify\": {\n      \"textAlign\": \"justify\"\n    },\n    \"text-2xl\": {\n      \"fontSize\": 20\n    }\n  }\n});","map":{"version":3,"names":["React","ScrollView","Button","Text","View","Image","useGetData","API_BASE_URL","jsx","_jsx","jsxs","_jsxs","EventsDetail","_ref","navigation","route","event","_route$params","params","eventID","eventName","_React$useState","useState","_React$useState2","_slicedToArray","postText","setPostText","_useGetData","_useGetData2","data","loading","error","_StyledComponent","className","component","children","source","uri","imageUrl","dateStart","eventDescription","title","onPress","console","log","_NativeWindStyleSheet","create","styles"],"sources":["D:/Learning/ReactNative/Festival/src/Pages/EventsDetail.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { ScrollView, Button, Text, View, Image } from \"react-native\";\r\nimport useGetData from \"../Api/useGetData\";\r\nimport { API_BASE_URL } from \"../Api/BaseURL\";\r\n\r\nfunction EventsDetail({ navigation, route, event }) {\r\n  const { eventID, eventName } = route.params;\r\n  const [postText, setPostText] = React.useState(\"\");\r\n  const [data, loading, error] = useGetData(\r\n    `${API_BASE_URL}/events/${eventID}`\r\n  );\r\n  if (!loading)\r\n    return (\r\n      <ScrollView className=\"  \">\r\n        <Image\r\n          className=\"w-full h-[250] rounded-b-[20] \"\r\n          source={{ uri: data[0].imageUrl }}\r\n        />\r\n        <Text className=\"text-2xl mt-[30] mb-[5] px-[30] \">{eventName}</Text>\r\n        <Text className=\" px-[30] mb-[10] text-justify \">{data[0].dateStart}</Text>\r\n        <Text className=\" px-[30] mb-[30] text-justify \">{data[0].eventDescription}</Text>\r\n        <View className=\" bg-green-500 w-full h-[300] \"></View>\r\n        <Button\r\n          title=\"log\"\r\n          onPress={() => {\r\n            console.log(eventID);\r\n          }}\r\n        ></Button>\r\n      </ScrollView>\r\n    );\r\n}\r\n\r\nexport default EventsDetail;\r\n\r\n{\r\n  /* <TextInput\r\n        multiline\r\n        placeholder=\"What's on your mind?\"\r\n        style={{ height: 200, padding: 10, backgroundColor: \"white\" }}\r\n        value={postText}\r\n        onChangeText={setPostText}\r\n      />\r\n      <Button\r\n        title=\"Done\"\r\n        onPress={() => {\r\n          // Pass and merge params back to home screen\r\n          navigation.navigate({\r\n            name: \"EventsScreen\",\r\n            params: { post: postText },\r\n            merge: true,\r\n          });\r\n        }}\r\n      /> */\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAE1B,OAAOC,UAAU;AACjB,SAASC,YAAY;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9C,SAASC,YAAYA,CAAAC,IAAA,EAA+B;EAAA,IAA5BC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;IAAEC,KAAK,GAAAH,IAAA,CAALG,KAAK;EAC9C,IAAAC,aAAA,GAA+BF,KAAK,CAACG,MAAM;IAAnCC,OAAO,GAAAF,aAAA,CAAPE,OAAO;IAAEC,SAAS,GAAAH,aAAA,CAATG,SAAS;EAC1B,IAAAC,eAAA,GAAgCrB,KAAK,CAACsB,QAAQ,CAAC,EAAE,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA3CI,QAAQ,GAAAF,gBAAA;IAAEG,WAAW,GAAAH,gBAAA;EAC5B,IAAAI,WAAA,GAA+BrB,UAAU,CACpCC,YAAY,gBAAWY,OAC5B,CAAC;IAAAS,YAAA,GAAAJ,cAAA,CAAAG,WAAA;IAFME,IAAI,GAAAD,YAAA;IAAEE,OAAO,GAAAF,YAAA;IAAEG,KAAK,GAAAH,YAAA;EAG3B,IAAI,CAACE,OAAO,EACV,OAAAnB,KAAA,CAAAqB,gBAAA;IACcC,SAAS,EAAC,IAAI;IAAAC,SAAA,EAAAjC,UAAA;IAAAkC,QAAA,GAAA1B,IAAA,CAAAuB,gBAAA;MAEtBC,SAAS,EAAC,gCAAgC;MAC1CG,MAAM,EAAE;QAAEC,GAAG,EAAER,IAAI,CAAC,CAAC,CAAC,CAACS;MAAS,CAAE;MAAAJ,SAAA,EAAA7B;IAAA,IAAAI,IAAA,CAAAuB,gBAAA;MAE9BC,SAAS,EAAC,kCAAkC;MAAAC,SAAA,EAAA/B,IAAA;MAAAgC,QAAA,EAAEf;IAAS,IAAAX,IAAA,CAAAuB,gBAAA;MACvDC,SAAS,EAAC,gCAAgC;MAAAC,SAAA,EAAA/B,IAAA;MAAAgC,QAAA,EAAEN,IAAI,CAAC,CAAC,CAAC,CAACU;IAAS,IAAA9B,IAAA,CAAAuB,gBAAA;MAC7DC,SAAS,EAAC,gCAAgC;MAAAC,SAAA,EAAA/B,IAAA;MAAAgC,QAAA,EAAEN,IAAI,CAAC,CAAC,CAAC,CAACW;IAAgB,IAAA/B,IAAA,CAAAuB,gBAAA;MACpEC,SAAS,EAAC,+BAA+B;MAAAC,SAAA,EAAA9B;IAAA,IAC/CK,IAAA,CAACP,MAAM;MACLuC,KAAK,EAAC,KAAK;MACXC,OAAO,EAAE,SAAAA,QAAA,EAAM;QACbC,OAAO,CAACC,GAAG,CAACzB,OAAO,CAAC;MACtB;IAAE,CACK,CAAC;EAAA;AAGlB;AAEA,eAAeP,YAAY;AAE3B,CAmBA;AAACiC,qBAAA,CAAAC,MAAA;EAAAC,MAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}